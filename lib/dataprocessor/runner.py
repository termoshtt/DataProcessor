# -*- coding: utf-8 -*-

import os
import tempfile
from subprocess import check_call
from daemon import DaemonContext

from .utility import check_directory


def sync(host, execute_dir, args):
    """ Execute as a subprocess (wait for finish)

    Parameters
    ----------
    execute_dir : str
        path of directory where the command is executed
    args : [str]
        arguments
    """
    if host:
        check_call(["ssh", host, "cd " + execute_dir + " && " + " ".join(args)])
    else:
        os.chdir(execute_dir)
        check_call(args)


def daemon(host, execute_dir, args):
    """ Execute as a daemon process

    Parameters
    ----------
    execute_dir : str
        path of directory where the command is executed
    args : [str]
        arguments
    """
    if host:
        with DaemonContext():
            check_call(["ssh", host, "cd " + execute_dir + " && " + " ".join(args)])
    else:
        with DaemonContext(working_directory=execute_dir):
            check_call(args)


atnow_template = """#!/bin/sh
# Automatically generated by dataprocessor.runner.atnow
cd {path}
{args}
"""


def atnow(host, execute_dir, args):
    """ Execute command using at (POSIX)

    Parameters
    ----------
    execute_dir : str
        path of directory where the command is executed
    args : [str]
        arguments
    """
    if host:
        raise NotImplementedError("runner 'atnow' is valid only for localhost")
    path = check_directory(execute_dir)
    tmp = tempfile.NamedTemporaryFile()
    tmp.write(atnow_template.format(path=path, args=" ".join(args)))
    tmp.flush()
    check_call(['at', 'now', '-f', tmp.name])


def manual(host, execute_dir, args):
    fn = "manual_start.sh"
    with open(fn, "w") as f:
        f.write(atnow_template.format(path=execute_dir, args=" ".join(args)))
    print("Manually start run")
    if host:
        print("$ ssh " + host + " < " + fn)
    else:
        print("$ /bin/sh {}".format(fn))


runners = {
    "sync": sync,
    "daemon": daemon,
    "atnow": atnow,
    "manual": manual,
}
